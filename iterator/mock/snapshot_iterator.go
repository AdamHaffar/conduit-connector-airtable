// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\Adam\Documents\Meroxa\Conduit\conduit-connector-airtable\iterator\snapshot_iterator.go

// Package mock_iterator is a generated GoMock package.
package mock_iterator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	airtable "github.com/mehanizm/airtable"
)

// MockAirtableClientInterface is a mock of AirtableClientInterface interface.
type MockAirtableClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAirtableClientInterfaceMockRecorder
}

// MockAirtableClientInterfaceMockRecorder is the mock recorder for MockAirtableClientInterface.
type MockAirtableClientInterfaceMockRecorder struct {
	mock *MockAirtableClientInterface
}

// NewMockAirtableClientInterface creates a new mock instance.
func NewMockAirtableClientInterface(ctrl *gomock.Controller) *MockAirtableClientInterface {
	mock := &MockAirtableClientInterface{ctrl: ctrl}
	mock.recorder = &MockAirtableClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAirtableClientInterface) EXPECT() *MockAirtableClientInterfaceMockRecorder {
	return m.recorder
}

// GetTable mocks base method.
func (m *MockAirtableClientInterface) GetTable(baseID, tableID string) *airtable.Table {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTable", baseID, tableID)
	ret0, _ := ret[0].(*airtable.Table)
	return ret0
}

// GetTable indicates an expected call of GetTable.
func (mr *MockAirtableClientInterfaceMockRecorder) GetTable(baseID, tableID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTable", reflect.TypeOf((*MockAirtableClientInterface)(nil).GetTable), baseID, tableID)
}
